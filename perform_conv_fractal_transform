def perform_conv_fractal_transform(weights, num_iterations=100, threshold=2.0):
    """
    Perform fractal transformation for convolutional layers.
    """
    # Get the shape of the convolutional weights
    num_filters, num_channels, filter_height, filter_width = weights.shape

    # Initialize the fractal representation
    fractal = np.zeros_like(weights)

    # Iterate over each filter in the convolutional layer
    for i in range(num_filters):
        for j in range(num_channels):
            # Extract the current filter weights
            filter_weights = weights[i, j]

            # Normalize the filter weights to the range [-1, 1]
            normalized_weights = (filter_weights - np.min(filter_weights)) / (np.max(filter_weights) - np.min(filter_weights))
            normalized_weights = normalized_weights * 2 - 1

            # Apply the fractal transformation to the normalized weights
            transformed_weights = np.zeros_like(normalized_weights)
            for x in range(filter_height):
                for y in range(filter_width):
                    z = complex(0, 0)
                    c = complex(normalized_weights[x, y], 0)

                    for _ in range(num_iterations):
                        z = z ** 2 + c
                        if abs(z) > threshold:
                            break

                    transformed_weights[x, y] = abs(z)

            # Normalize the transformed weights to the range [0, 1]
            normalized_transformed_weights = (transformed_weights - np.min(transformed_weights)) / (np.max(transformed_weights) - np.min(transformed_weights))

            # Assign the transformed weights to the fractal representation
            fractal[i, j] = normalized_transformed_weights

    return fractal
